const http = require('http');

function testProjectsImageUpdate() {
  console.log('üñºÔ∏è Probando actualizaci√≥n de imagen en p√°gina de proyectos...\n');
  
  function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
      const req = http.request(options, (res) => {
        let responseData = '';
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        res.on('end', () => {
          try {
            const jsonData = JSON.parse(responseData);
            resolve({ status: res.statusCode, data: jsonData, raw: responseData });
          } catch (error) {
            resolve({ status: res.statusCode, data: responseData, raw: responseData });
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      if (data) {
        req.write(JSON.stringify(data));
      }
      req.end();
    });
  }

  async function runTest() {
    try {
      // Probar la p√°gina de proyectos
      console.log('üìÑ Verificando p√°gina de proyectos con nueva imagen...');
      const pageResponse = await makeRequest({
        hostname: 'localhost',
        port: 3000,
        path: '/proyectos',
        method: 'GET'
      });

      if (pageResponse.status === 200) {
        console.log(`‚úÖ P√°gina carga correctamente (${pageResponse.status})`);
        
        const pageContent = pageResponse.raw;
        
        // Verificar que la nueva imagen de Pexels est√© presente
        const hasPexelsImage = pageContent.includes('https://images.pexels.com/photos/9543732/pexels-photo-9543732.jpeg');
        const hasOldImage = pageContent.includes('lh3.googleusercontent.com');
        
        console.log(`\n‚úÖ Verificaci√≥n de imagen:`);
        console.log(`   - Nueva imagen Pexels: ${hasPexelsImage ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Imagen anterior: ${hasOldImage ? '‚ùå (a√∫n presente)' : '‚úÖ (reemplazada)'}`);
        
        // Verificar elementos del hero section
        const hasHeroTitle = pageContent.includes('Proyectos de Impacto Real');
        const hasGradient = pageContent.includes('bg-gradient-to-r from-black/70');
        const hasButton = pageContent.includes('EXPLORA NUESTROS PROYECTOS');
        
        console.log(`\n‚úÖ Elementos del hero section:`);
        console.log(`   - T√≠tulo principal: ${hasHeroTitle ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Gradiente de fondo: ${hasGradient ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Bot√≥n de acci√≥n: ${hasButton ? '‚úÖ' : '‚ùå'}`);
        
        if (hasPexelsImage && !hasOldImage && hasHeroTitle && hasGradient && hasButton) {
          console.log(`\nüéâ ¬°√âXITO! La imagen de Pexels se ha aplicado correctamente`);
          console.log(`‚úÖ Hero section actualizado con nueva imagen`);
          console.log(`‚úÖ Dise√±o consistente mantenido`);
          console.log(`‚úÖ Imagen anterior reemplazada`);
        } else {
          console.log(`\n‚ö†Ô∏è  Verificar que todos los cambios se hayan aplicado correctamente`);
        }
      } else {
        console.log(`‚ùå Error en p√°gina: ${pageResponse.status}`);
        return;
      }

      console.log('\nüìã Resumen de cambios:');
      console.log('‚úÖ Imagen de fondo actualizada a Pexels');
      console.log('‚úÖ URL: https://images.pexels.com/photos/9543732/pexels-photo-9543732.jpeg');
      console.log('‚úÖ Hero section mantiene el mismo dise√±o');
      console.log('‚úÖ Gradiente y elementos de texto conservados');
      console.log('‚úÖ Estructura de proyectos sin cambios');
      
      console.log('\nüéØ Para verificar visualmente:');
      console.log('   Visita: http://localhost:3000/proyectos');
      console.log('   La imagen de fondo del hero debe ser la nueva imagen de Pexels');

    } catch (error) {
      console.error('‚ùå Error en la prueba:', error.message);
    }
  }

  runTest();
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  testProjectsImageUpdate();
}

module.exports = { testProjectsImageUpdate };
