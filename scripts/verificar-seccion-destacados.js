const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificarSeccionDestacados() {
  try {
    console.log('üéØ Verificando nueva secci√≥n de Iniciativas Destacadas...\n');

    // Verificar programas
    const programas = await prisma.programas.findMany({
      where: { isActive: true },
      select: {
        id: true,
        nombreSector: true,
        descripcion: true,
        isFeatured: true,
        _count: {
          select: {
            news: true,
            imageLibrary: true
          }
        }
      },
      take: 3
    });

    console.log('üìã PROGRAMAS DESTACADOS (primeros 3):');
    programas.forEach((programa, index) => {
      console.log(`  ${index + 1}. "${programa.nombreSector}" (${programa._count.news} noticias, ${programa._count.imageLibrary} im√°genes) ${programa.isFeatured ? '‚≠ê Destacado' : ''}`);
    });

    // Verificar proyectos
    const proyectos = await prisma.project.findMany({
      where: { isActive: true },
      select: {
        id: true,
        title: true,
        executionStart: true,
        executionEnd: true,
        isFeatured: true
      },
      take: 3
    });

    console.log('\nüöÄ PROYECTOS DESTACADOS (primeros 3):');
    proyectos.forEach((proyecto, index) => {
      console.log(`  ${index + 1}. "${proyecto.title}" (${proyecto.executionStart} - ${proyecto.executionEnd}) ${proyecto.isFeatured ? '‚≠ê Destacado' : ''}`);
    });

    // Verificar metodolog√≠as
    const metodologias = await prisma.methodology.findMany({
      where: { isActive: true },
      select: {
        id: true,
        title: true,
        category: true,
        ageGroup: true
      },
      take: 3
    });

    console.log('\nüìö METODOLOG√çAS DESTACADAS (primeros 3):');
    metodologias.forEach((metodologia, index) => {
      console.log(`  ${index + 1}. "${metodologia.title}" (${metodologia.category}) - ${metodologia.ageGroup}`);
    });

    console.log('\nüé® NUEVA SECCI√ìN IMPLEMENTADA:');
    console.log('‚úÖ Secci√≥n "Iniciativas Destacadas" agregada');
    console.log('‚úÖ 3 subsecciones: Programas, Proyectos y Metodolog√≠as');
    console.log('‚úÖ Cada subsecci√≥n muestra m√°ximo 3 elementos');
    console.log('‚úÖ Botones "Ver Todos" que redirigen a p√°ginas espec√≠ficas');
    console.log('‚úÖ Cards con hover effects y badges de destacado');
    console.log('‚úÖ Iconos distintivos para cada categor√≠a');
    console.log('‚úÖ Informaci√≥n espec√≠fica de cada tipo de iniciativa');

    console.log('\nüîó ENLACES DE NAVEGACI√ìN:');
    console.log('‚Ä¢ Programas ‚Üí /programas-solo');
    console.log('‚Ä¢ Proyectos ‚Üí /proyectos');
    console.log('‚Ä¢ Metodolog√≠as ‚Üí /metodologias');

    console.log('\nüìä RESUMEN DE LA SECCI√ìN:');
    console.log(`- Programas mostrados: ${programas.length}/3`);
    console.log(`- Proyectos mostrados: ${proyectos.length}/3`);
    console.log(`- Metodolog√≠as mostradas: ${metodologias.length}/3`);

    console.log('\nüéØ CARACTER√çSTICAS DE LA NUEVA SECCI√ìN:');
    console.log('‚Ä¢ T√≠tulo principal: "CONOCE NUESTROS TRABAJOS M√ÅS RELEVANTES"');
    console.log('‚Ä¢ Badge: "INICIATIVAS DESTACADAS"');
    console.log('‚Ä¢ Cada subsecci√≥n tiene su propio t√≠tulo e icono');
    console.log('‚Ä¢ Botones "Ver Todos" con flecha de navegaci√≥n');
    console.log('‚Ä¢ Cards responsivas (1 columna en m√≥vil, 3 en desktop)');
    console.log('‚Ä¢ Informaci√≥n espec√≠fica por tipo de iniciativa');
    console.log('‚Ä¢ Estados de carga y mensajes cuando no hay datos');

    console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('\nüöÄ ESTADO ACTUAL:');
    console.log(`- ${programas.length} programas listos para mostrar en destacados`);
    console.log(`- ${proyectos.length} proyectos listos para mostrar en destacados`);
    console.log(`- ${metodologias.length} metodolog√≠as listas para mostrar en destacados`);
    console.log('- Nueva secci√≥n completamente funcional');
    console.log('- Enlaces de navegaci√≥n configurados correctamente');

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarSeccionDestacados();
