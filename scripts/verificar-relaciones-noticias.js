const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificarRelacionesNoticias() {
  try {
    console.log('üîç Verificando relaciones de noticias con programas, proyectos y metodolog√≠as...\n');

    // Verificar noticias relacionadas con programas
    const noticiasProgramas = await prisma.news.findMany({
      where: { programaId: { not: null } },
      include: {
        programa: {
          select: { nombreSector: true }
        }
      }
    });

    console.log('üìã NOTICIAS RELACIONADAS CON PROGRAMAS:');
    console.log(`Total: ${noticiasProgramas.length}`);
    noticiasProgramas.forEach(noticia => {
      console.log(`  ‚Ä¢ "${noticia.title}" ‚Üí Programa: ${noticia.programa?.nombreSector}`);
    });

    // Verificar noticias relacionadas con proyectos
    const noticiasProyectos = await prisma.news.findMany({
      where: { projectId: { not: null } },
      include: {
        project: {
          select: { title: true }
        }
      }
    });

    console.log('\nüöÄ NOTICIAS RELACIONADAS CON PROYECTOS:');
    console.log(`Total: ${noticiasProyectos.length}`);
    noticiasProyectos.forEach(noticia => {
      console.log(`  ‚Ä¢ "${noticia.title}" ‚Üí Proyecto: ${noticia.project?.title}`);
    });

    // Verificar noticias relacionadas con metodolog√≠as
    const noticiasMetodologias = await prisma.news.findMany({
      where: { methodologyId: { not: null } },
      include: {
        methodology: {
          select: { title: true }
        }
      }
    });

    console.log('\nüìö NOTICIAS RELACIONADAS CON METODOLOG√çAS:');
    console.log(`Total: ${noticiasMetodologias.length}`);
    noticiasMetodologias.forEach(noticia => {
      console.log(`  ‚Ä¢ "${noticia.title}" ‚Üí Metodolog√≠a: ${noticia.methodology?.title}`);
    });

    // Verificar noticias independientes (sin relaciones)
    const noticiasIndependientes = await prisma.news.findMany({
      where: {
        programaId: null,
        projectId: null,
        methodologyId: null
      }
    });

    console.log('\nüîó NOTICIAS INDEPENDIENTES (SIN RELACIONES):');
    console.log(`Total: ${noticiasIndependientes.length}`);
    noticiasIndependientes.forEach(noticia => {
      console.log(`  ‚Ä¢ "${noticia.title}"`);
    });

    // Resumen total
    const totalNoticias = await prisma.news.count();
    const totalConRelaciones = noticiasProgramas.length + noticiasProyectos.length + noticiasMetodologias.length;

    console.log('\nüìä RESUMEN GENERAL:');
    console.log(`- Total de noticias: ${totalNoticias}`);
    console.log(`- Noticias con relaciones: ${totalConRelaciones}`);
    console.log(`- Noticias independientes: ${noticiasIndependientes.length}`);
    console.log(`- Porcentaje con relaciones: ${((totalConRelaciones / totalNoticias) * 100).toFixed(1)}%`);

    // Verificar que las p√°ginas p√∫blicas tengan datos
    console.log('\nüåê VERIFICACI√ìN DE P√ÅGINAS P√öBLICAS:');
    
    const programasActivos = await prisma.programas.count({ where: { isActive: true } });
    const proyectosActivos = await prisma.project.count({ where: { isActive: true } });
    const metodologiasActivas = await prisma.methodology.count({ where: { isActive: true } });

    console.log(`- Programas activos: ${programasActivos}`);
    console.log(`- Proyectos activos: ${proyectosActivos}`);
    console.log(`- Metodolog√≠as activas: ${metodologiasActivas}`);

    console.log('\n‚úÖ Verificaci√≥n completada exitosamente!');
    console.log('\nüéØ FUNCIONALIDADES DISPONIBLES:');
    console.log('‚Ä¢ ‚úÖ Administraci√≥n de relaciones en CMS');
    console.log('‚Ä¢ ‚úÖ Carrusel de noticias en p√°ginas de programas');
    console.log('‚Ä¢ ‚úÖ Carrusel de noticias en p√°ginas de proyectos');
    console.log('‚Ä¢ ‚úÖ Carrusel de noticias en p√°ginas de metodolog√≠as');
    console.log('‚Ä¢ ‚úÖ Noticias independientes (sin relaciones obligatorias)');
    console.log('‚Ä¢ ‚úÖ Visualizaci√≥n de relaciones en dashboard');

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarRelacionesNoticias();
