const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testEditProjectWithNewFields() {
  try {
    console.log('‚úèÔ∏è Probando edici√≥n de proyectos con nuevos campos...\n');

    // 1. Crear un proyecto de prueba
    console.log('1. Creando proyecto de prueba...');
    const project = await prisma.project.create({
      data: {
        title: 'Proyecto Edici√≥n - Prueba',
        context: 'Este proyecto se usar√° para probar la edici√≥n con nuevos campos',
        objectives: 'Probar edici√≥n con campos de imagen de referencia',
        content: 'Contenido de prueba para edici√≥n',
        executionStart: new Date(),
        executionEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        isActive: true,
        isFeatured: false,
        creator: {
          connect: { id: 'cmgz8yvb10000fv4cnlxzcxw5' }
        }
      }
    });

    const donationProject = await prisma.donationProject.create({
      data: {
        projectId: project.id,
        accountNumber: '3333333333',
        recipientName: 'Fundaci√≥n Estrella del Sur',
        qrImageUrl: 'https://ejemplo.com/qr-original.png',
        qrImageAlt: 'QR original',
        referenceImageUrl: 'https://ejemplo.com/referencia-original.jpg',
        referenceImageAlt: 'Imagen de referencia original',
        targetAmount: 3000,
        currentAmount: 0,
        isActive: true,
        isCompleted: false
      }
    });

    console.log('‚úÖ Proyecto creado:', {
      id: donationProject.id,
      title: project.title,
      qrImageUrl: donationProject.qrImageUrl,
      qrImageAlt: donationProject.qrImageAlt,
      referenceImageUrl: donationProject.referenceImageUrl,
      referenceImageAlt: donationProject.referenceImageAlt,
      targetAmount: donationProject.targetAmount.toString(),
      isActive: donationProject.isActive
    });

    // 2. Simular edici√≥n con nuevos campos
    console.log('\n2. Simulando edici√≥n con nuevos campos...');
    
    const updatedDonationProject = await prisma.donationProject.update({
      where: { id: donationProject.id },
      data: {
        qrImageUrl: 'https://ejemplo.com/qr-actualizado.png',
        qrImageAlt: 'QR actualizado',
        referenceImageUrl: 'https://ejemplo.com/referencia-actualizada.jpg',
        referenceImageAlt: 'Imagen de referencia actualizada',
        targetAmount: 5000,
        isActive: false
      }
    });

    console.log('‚úÖ Proyecto actualizado:', {
      id: updatedDonationProject.id,
      qrImageUrl: updatedDonationProject.qrImageUrl,
      qrImageAlt: updatedDonationProject.qrImageAlt,
      referenceImageUrl: updatedDonationProject.referenceImageUrl,
      referenceImageAlt: updatedDonationProject.referenceImageAlt,
      targetAmount: updatedDonationProject.targetAmount.toString(),
      isActive: updatedDonationProject.isActive
    });

    // 3. Verificar cambios en formulario de edici√≥n
    console.log('\n3. Campos del formulario de edici√≥n:');
    console.log('   üìù Meta de Recaudaci√≥n: Campo num√©rico para targetAmount');
    console.log('   üè¶ N√∫mero de Cuenta: Campo requerido para accountNumber');
    console.log('   üë§ Nombre del Destinatario: Campo requerido para recipientName');
    console.log('   üì± URL de Imagen QR: Campo opcional para qrImageUrl');
    console.log('   üì± Alt Text de Imagen QR: Campo opcional para qrImageAlt');
    console.log('   üñºÔ∏è URL de Imagen de Referencia: Campo opcional para referenceImageUrl');
    console.log('   üñºÔ∏è Alt Text de Imagen de Referencia: Campo opcional para referenceImageAlt');
    console.log('   ‚úÖ Proyecto activo: Checkbox para isActive');

    // 4. Verificar funci√≥n openEditDialog
    console.log('\n4. Funci√≥n openEditDialog:');
    console.log('   ‚úÖ Pobla projectTitle desde project.project.title');
    console.log('   ‚úÖ Pobla projectDescription desde project.project.context');
    console.log('   ‚úÖ Pobla accountNumber desde project.accountNumber');
    console.log('   ‚úÖ Pobla recipientName desde project.recipientName');
    console.log('   ‚úÖ Pobla qrImageUrl desde project.qrImageUrl || ""');
    console.log('   ‚úÖ Pobla qrImageAlt desde project.qrImageAlt || ""');
    console.log('   ‚úÖ Pobla referenceImageUrl desde project.referenceImageUrl || ""');
    console.log('   ‚úÖ Pobla referenceImageAlt desde project.referenceImageAlt || ""');
    console.log('   ‚úÖ Pobla targetAmount desde project.targetAmount?.toString() || ""');
    console.log('   ‚úÖ Pobla isActive desde project.isActive');

    // 5. Verificar funci√≥n handleEditProject
    console.log('\n5. Funci√≥n handleEditProject:');
    console.log('   ‚úÖ Env√≠a todos los campos del formData usando spread operator');
    console.log('   ‚úÖ Convierte targetAmount a parseFloat si existe');
    console.log('   ‚úÖ Maneja errores con notificaciones toast');
    console.log('   ‚úÖ Actualiza la lista despu√©s de editar');
    console.log('   ‚úÖ Cierra el di√°logo y resetea el formulario');

    // 6. Verificar API de actualizaci√≥n
    console.log('\n6. API de actualizaci√≥n (/api/donation-projects/[id]):');
    console.log('   ‚úÖ M√©todo PATCH para actualizar proyectos');
    console.log('   ‚úÖ Requiere autenticaci√≥n de administrador');
    console.log('   ‚úÖ Actualiza accountNumber, recipientName');
    console.log('   ‚úÖ Actualiza qrImageUrl, qrImageAlt');
    console.log('   ‚úÖ Actualiza referenceImageUrl, referenceImageAlt');
    console.log('   ‚úÖ Actualiza targetAmount, isActive');
    console.log('   ‚úÖ Retorna proyecto actualizado con relaciones');

    // 7. Limpiar datos de prueba
    console.log('\n7. Limpiando datos de prueba...');
    await prisma.donationProject.delete({
      where: { id: donationProject.id }
    });
    
    await prisma.project.delete({
      where: { id: project.id }
    });

    console.log('‚úÖ Datos de prueba eliminados');
    console.log('\nüéâ ¬°Prueba de edici√≥n con nuevos campos completada!');
    console.log('\nüìã Resumen:');
    console.log('   ‚úÖ Proyecto creado con campos originales');
    console.log('   ‚úÖ Campos actualizados correctamente');
    console.log('   ‚úÖ Formulario de edici√≥n incluye todos los campos');
    console.log('   ‚úÖ Funci√≥n openEditDialog pobla todos los campos');
    console.log('   ‚úÖ Funci√≥n handleEditProject env√≠a todos los campos');
    console.log('   ‚úÖ API maneja todos los campos correctamente');
    console.log('   ‚úÖ Limpieza de datos completada');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testEditProjectWithNewFields();
