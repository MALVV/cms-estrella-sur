const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificarImagenesDisponibles() {
  try {
    console.log('üñºÔ∏è Verificando im√°genes disponibles en la base de datos...\n');

    // Verificar im√°genes de programas
    const programasConImagenes = await prisma.programas.findMany({
      where: { isActive: true },
      select: {
        id: true,
        nombreSector: true,
        imageLibrary: {
          where: { isActive: true },
          select: {
            id: true,
            title: true,
            imageUrl: true,
            imageAlt: true
          },
          take: 1
        }
      },
      take: 5
    });

    console.log('üìã PROGRAMAS CON IM√ÅGENES:');
    programasConImagenes.forEach((programa, index) => {
      console.log(`  ${index + 1}. "${programa.nombreSector}"`);
      if (programa.imageLibrary.length > 0) {
        console.log(`     ‚úÖ Imagen: ${programa.imageLibrary[0].title}`);
        console.log(`     üì∑ URL: ${programa.imageLibrary[0].imageUrl}`);
      } else {
        console.log(`     ‚ùå Sin im√°genes`);
      }
    });

    // Verificar proyectos con im√°genes
    const proyectosConImagenes = await prisma.project.findMany({
      where: { 
        isActive: true,
        imageUrl: { not: null }
      },
      select: {
        id: true,
        title: true,
        imageUrl: true,
        imageAlt: true
      },
      take: 5
    });

    console.log('\nüöÄ PROYECTOS CON IM√ÅGENES:');
    proyectosConImagenes.forEach((proyecto, index) => {
      console.log(`  ${index + 1}. "${proyecto.title}"`);
      if (proyecto.imageUrl) {
        console.log(`     ‚úÖ Imagen: ${proyecto.imageAlt || 'Sin t√≠tulo'}`);
        console.log(`     üì∑ URL: ${proyecto.imageUrl}`);
      } else {
        console.log(`     ‚ùå Sin imagen`);
      }
    });

    // Verificar metodolog√≠as con im√°genes
    const metodologiasConImagenes = await prisma.methodology.findMany({
      where: { 
        isActive: true,
        imageUrl: { not: null }
      },
      select: {
        id: true,
        title: true,
        imageUrl: true,
        imageAlt: true
      },
      take: 5
    });

    console.log('\nüìö METODOLOG√çAS CON IM√ÅGENES:');
    metodologiasConImagenes.forEach((metodologia, index) => {
      console.log(`  ${index + 1}. "${metodologia.title}"`);
      if (metodologia.imageUrl) {
        console.log(`     ‚úÖ Imagen: ${metodologia.imageAlt || 'Sin t√≠tulo'}`);
        console.log(`     üì∑ URL: ${metodologia.imageUrl}`);
      } else {
        console.log(`     ‚ùå Sin imagen`);
      }
    });

    // Contar totales
    const totalProgramas = await prisma.programas.count({ where: { isActive: true } });
    const totalProyectos = await prisma.project.count({ where: { isActive: true } });
    const totalMetodologias = await prisma.methodology.count({ where: { isActive: true } });

    const programasConImg = await prisma.programas.count({
      where: {
        isActive: true,
        imageLibrary: {
          some: { isActive: true }
        }
      }
    });

    const proyectosConImg = await prisma.project.count({
      where: {
        isActive: true,
        imageUrl: { not: null }
      }
    });

    const metodologiasConImg = await prisma.methodology.count({
      where: {
        isActive: true,
        imageUrl: { not: null }
      }
    });

    console.log('\nüìä RESUMEN DE IM√ÅGENES:');
    console.log(`- Programas: ${programasConImg}/${totalProgramas} tienen im√°genes`);
    console.log(`- Proyectos: ${proyectosConImg}/${totalProyectos} tienen im√°genes`);
    console.log(`- Metodolog√≠as: ${metodologiasConImg}/${totalMetodologias} tienen im√°genes`);

    console.log('\nüéØ RECOMENDACIONES:');
    if (programasConImg === 0) {
      console.log('‚ö†Ô∏è  No hay programas con im√°genes. Considerar agregar im√°genes a la biblioteca de im√°genes.');
    }
    if (proyectosConImg === 0) {
      console.log('‚ö†Ô∏è  No hay proyectos con im√°genes. Considerar agregar URLs de imagen a los proyectos.');
    }
    if (metodologiasConImg === 0) {
      console.log('‚ö†Ô∏è  No hay metodolog√≠as con im√°genes. Considerar agregar URLs de imagen a las metodolog√≠as.');
    }

  } catch (error) {
    console.error('‚ùå Error verificando im√°genes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarImagenesDisponibles();
