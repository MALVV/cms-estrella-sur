const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificarIniciativas() {
  try {
    console.log('üîç Verificando estructura de Iniciativas...\n');

    // Verificar programas
    const programas = await prisma.programas.findMany({
      where: { isActive: true },
      select: {
        id: true,
        nombreSector: true,
        isActive: true,
        _count: {
          select: {
            news: true,
            imageLibrary: true
          }
        }
      }
    });

    console.log('üìã PROGRAMAS ESTRAT√âGICOS:');
    console.log(`Total activos: ${programas.length}`);
    programas.forEach(programa => {
      console.log(`  ‚Ä¢ "${programa.nombreSector}" (${programa._count.news} noticias, ${programa._count.imageLibrary} im√°genes)`);
    });

    // Verificar proyectos
    const proyectos = await prisma.project.findMany({
      where: { isActive: true },
      select: {
        id: true,
        title: true,
        executionStart: true,
        executionEnd: true,
        isActive: true
      }
    });

    console.log('\nüöÄ PROYECTOS ESPEC√çFICOS:');
    console.log(`Total activos: ${proyectos.length}`);
    proyectos.forEach(proyecto => {
      console.log(`  ‚Ä¢ "${proyecto.title}" (${proyecto.executionStart} - ${proyecto.executionEnd})`);
    });

    // Verificar metodolog√≠as
    const metodologias = await prisma.methodology.findMany({
      where: { isActive: true },
      select: {
        id: true,
        title: true,
        category: true,
        ageGroup: true,
        isActive: true
      }
    });

    console.log('\nüìö METODOLOG√çAS INNOVADORAS:');
    console.log(`Total activas: ${metodologias.length}`);
    metodologias.forEach(metodologia => {
      console.log(`  ‚Ä¢ "${metodologia.title}" (${metodologia.category}) - ${metodologia.ageGroup}`);
    });

    // Resumen total
    const totalIniciativas = programas.length + proyectos.length + metodologias.length;

    console.log('\nüìä RESUMEN GENERAL:');
    console.log(`- Total de iniciativas: ${totalIniciativas}`);
    console.log(`- Programas estrat√©gicos: ${programas.length}`);
    console.log(`- Proyectos espec√≠ficos: ${proyectos.length}`);
    console.log(`- Metodolog√≠as innovadoras: ${metodologias.length}`);

    console.log('\nüåê ESTRUCTURA DE NAVEGACI√ìN:');
    console.log('‚Ä¢ /iniciativas - P√°gina principal con todas las iniciativas');
    console.log('‚Ä¢ /programas-solo - Solo programas estrat√©gicos');
    console.log('‚Ä¢ /proyectos - Solo proyectos espec√≠ficos');
    console.log('‚Ä¢ /metodologias - Solo metodolog√≠as innovadoras');
    console.log('‚Ä¢ /programas/[id] - Detalle de programa espec√≠fico');
    console.log('‚Ä¢ /proyectos/[id] - Detalle de proyecto espec√≠fico');
    console.log('‚Ä¢ /metodologias/[id] - Detalle de metodolog√≠a espec√≠fica');

    console.log('\nüéØ NAVBAR ACTUALIZADO:');
    console.log('‚Ä¢ Men√∫ principal: "Iniciativas" (antes "Programas")');
    console.log('‚Ä¢ Men√∫ desplegable con opciones:');
    console.log('  - Todas las Iniciativas (vista unificada)');
    console.log('  - Programas (programas estrat√©gicos)');
    console.log('  - Proyectos (iniciativas espec√≠ficas)');
    console.log('  - Metodolog√≠as (enfoques innovadores)');

    console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('\nüöÄ ESTADO ACTUAL:');
    console.log(`- ${programas.length} programas listos para mostrar`);
    console.log(`- ${proyectos.length} proyectos listos para mostrar`);
    console.log(`- ${metodologias.length} metodolog√≠as listas para mostrar`);
    console.log('- Navegaci√≥n actualizada a "Iniciativas"');
    console.log('- P√°gina unificada /iniciativas creada');

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarIniciativas();
