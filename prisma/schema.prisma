generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  password             String
  createdBy            String?
  emailVerified        DateTime?
  isActive             Boolean                @default(true)
  lastLoginAt          DateTime?
  lockedUntil          DateTime?
  loginAttempts        Int                    @default(0)
  mustChangePassword   Boolean                @default(false)
  refreshToken         String?                @unique
  refreshTokenExp      DateTime?
  role                 UserRole               @default(MANAGER)
  allies               Ally[]                 @relation("AllyCreator")
  reviewedComplaints   Complaint[]            @relation("ComplaintReviewer")
  createdConvocatorias Convocatoria[]         @relation("ConvocatoriaCreator")
  approvedDonations    Donation[]             @relation("DonationApprover")
  events               Event[]                @relation("EventOrganizer")
  imageLibrary         ImageLibrary[]         @relation("ImageLibraryCreator")
  methodologies        Methodology[]          @relation("MethodologyCreator")
  news                 News[]                 @relation("NewsAuthor")
  programs             Program[]              @relation("ProgramCreator")
  projects             Project[]              @relation("ProjectCreator")
  resources            Resource[]             @relation("ResourceCreator")
  stories              Story[]
  transparencyDocs     TransparencyDocument[] @relation("TransparencyCreator")
  creator              User?                  @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers         User[]                 @relation("UserCreator")
  videoTestimonials    VideoTestimonial[]     @relation("VideoTestimonialCreator")

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Story {
  id        String   @id
  title     String
  imageUrl  String
  imageAlt  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  content   String   @default("")
  summary   String   @default("")
  creator   User?    @relation(fields: [createdBy], references: [id])

  @@map("stories")
}

model Ally {
  id          String   @id
  name        String
  role        String
  description String?
  imageUrl    String
  imageAlt    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  isFeatured  Boolean  @default(false)
  creator     User?    @relation("AllyCreator", fields: [createdBy], references: [id])

  @@map("allies")
}

model News {
  id            String       @id @default(cuid())
  title         String
  content       String
  excerpt       String?
  imageUrl      String?
  imageAlt      String?
  isActive      Boolean      @default(true)
  isFeatured    Boolean      @default(false)
  publishedAt   DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  programId     String?
  methodologyId String?
  projectId     String?
  author        User?        @relation("NewsAuthor", fields: [createdBy], references: [id])
  methodology   Methodology? @relation("NewsMethodology", fields: [methodologyId], references: [id])
  program       Program?     @relation("NewsProgram", fields: [programId], references: [id])
  project       Project?     @relation("NewsProject", fields: [projectId], references: [id])

  @@map("news")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  imageAlt    String?
  eventDate   DateTime
  location    String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  organizer   User?    @relation("EventOrganizer", fields: [createdBy], references: [id])

  @@map("events")
}

model Project {
  id              String         @id @default(cuid())
  title           String
  executionStart  DateTime
  executionEnd    DateTime
  context         String
  objectives      String
  content         String
  strategicAllies String?
  financing       String?
  imageUrl        String?
  imageAlt        String?
  isActive        Boolean        @default(true)
  isFeatured      Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String?
  imageLibrary    ImageLibrary[] @relation("ImageLibraryProject")
  news            News[]         @relation("NewsProject")
  creator         User?          @relation("ProjectCreator", fields: [createdBy], references: [id])

  @@map("projects")
}

model Methodology {
  id               String               @id @default(cuid())
  title            String
  description      String
  shortDescription String
  imageUrl         String?
  imageAlt         String?
  ageGroup         String
  sectors          ProgrammaticSector[]
  targetAudience   String
  objectives       String
  implementation   String
  results          String
  methodology      String?
  resources        String?
  evaluation       String?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  createdBy        String?
  isFeatured       Boolean              @default(false)
  imageLibrary     ImageLibrary[]       @relation("ImageLibraryMethodology")
  creator          User?                @relation("MethodologyCreator", fields: [createdBy], references: [id])
  news             News[]               @relation("NewsMethodology")

  @@map("methodologies")
}

model TransparencyDocument {
  id          String               @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileUrl     String
  fileSize    Int?
  fileType    String?
  category    TransparencyCategory
  year        Int?
  isActive    Boolean              @default(true)
  isFeatured  Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   String?
  creator     User?                @relation("TransparencyCreator", fields: [createdBy], references: [id])

  @@map("transparency_documents")
}

model Resource {
  id            String               @id @default(cuid())
  title         String
  description   String?
  fileName      String
  fileUrl       String
  fileSize      Int?
  fileType      String?
  category      ResourceCategory
  subcategory   ResourceSubcategory?
  thumbnailUrl  String?
  duration      Int?
  isActive      Boolean              @default(true)
  isFeatured    Boolean              @default(false)
  downloadCount Int                  @default(0)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     String?
  creator       User?                @relation("ResourceCreator", fields: [createdBy], references: [id])

  @@map("resources")
}

model VideoTestimonial {
  id           String   @id @default(cuid())
  title        String
  description  String
  youtubeUrl   String
  thumbnailUrl String?
  duration     Int?
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  creator      User?    @relation("VideoTestimonialCreator", fields: [createdBy], references: [id])

  @@map("video_testimonials")
}

model Program {
  id                String         @id @default(cuid())
  sectorName        String
  description       String
  presentationVideo String?
  odsAlignment      String?
  resultsAreas      String?
  results           String?
  targetGroups      String?
  contentTopics     String?
  moreInfoLink      String?
  isActive          Boolean        @default(true)
  isFeatured        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  createdBy         String?
  imageAlt          String?
  imageUrl          String?
  imageLibrary      ImageLibrary[] @relation("ImageLibraryProgram")
  news              News[]         @relation("NewsProgram")
  creator           User?          @relation("ProgramCreator", fields: [createdBy], references: [id])

  @@map("programs")
}

model ImageLibrary {
  id            String       @id @default(cuid())
  title         String
  description   String?
  imageUrl      String
  imageAlt      String?
  fileName      String?
  fileSize      Int?
  fileType      String?
  isActive      Boolean      @default(true)
  isFeatured    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  programId     String?
  methodologyId String?
  projectId     String?
  creator       User?        @relation("ImageLibraryCreator", fields: [createdBy], references: [id])
  methodology   Methodology? @relation("ImageLibraryMethodology", fields: [methodologyId], references: [id])
  program       Program?     @relation("ImageLibraryProgram", fields: [programId], references: [id])
  project       Project?     @relation("ImageLibraryProject", fields: [projectId], references: [id])

  @@map("image_library")
}

model DonationProject {
  id                String     @id @default(cuid())
  title             String
  description       String
  context           String
  objectives        String
  executionStart    DateTime
  executionEnd      DateTime
  accountNumber     String
  recipientName     String
  qrImageUrl        String?
  qrImageAlt        String?
  referenceImageUrl String?
  referenceImageAlt String?
  targetAmount      Decimal?   @db.Decimal(10, 2)
  currentAmount     Decimal    @default(0) @db.Decimal(10, 2)
  isActive          Boolean    @default(true)
  isCompleted       Boolean    @default(false)
  isFeatured        Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  donations         Donation[]

  @@map("donation_projects")
}

model Donation {
  id                   String           @id @default(cuid())
  donorName            String
  donorEmail           String
  donorAddress         String
  donorPhone           String
  amount               Decimal          @db.Decimal(10, 2)
  donationType         DonationType
  message              String?
  status               DonationStatus   @default(PENDING)
  projectId            String?
  donationProjectId    String?
  bankTransferImage    String?
  bankTransferImageAlt String?
  approvedBy           String?
  approvedAt           DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  approver             User?            @relation("DonationApprover", fields: [approvedBy], references: [id])
  donationProject      DonationProject? @relation(fields: [donationProjectId], references: [id])

  @@map("donations")
}

model AnnualGoal {
  id            String   @id @default(cuid())
  year          Int      @unique
  targetAmount  Decimal  @db.Decimal(12, 2)
  currentAmount Decimal  @default(0) @db.Decimal(12, 2)
  description   String?
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("annual_goals")
}

model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("contact_messages")
}

model Complaint {
  id               String          @id @default(cuid())
  complaintType    String
  description      String
  incidentDate     String?
  incidentLocation String?
  peopleInvolved   String?
  evidence         String?
  contactName      String?
  contactEmail     String?
  status           ComplaintStatus @default(PENDING)
  reviewedAt       DateTime?
  reviewedBy       String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  reviewer         User?           @relation("ComplaintReviewer", fields: [reviewedBy], references: [id])

  @@map("complaints")
}

model Convocatoria {
  id               String                    @id @default(cuid())
  title            String
  description      String
  fullDescription  String
  imageUrl         String
  imageAlt         String?
  startDate        DateTime
  endDate          DateTime
  objectives       Json
  responsibilities Json
  qualifications   Json
  benefits         Json
  requirements     Json
  documents        Json
  status           ConvocatoriaStatus        @default(DRAFT)
  isActive         Boolean                   @default(true)
  isFeatured       Boolean                   @default(false)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  createdBy        String?
  creator          User?                     @relation("ConvocatoriaCreator", fields: [createdBy], references: [id])
  applications     ConvocatoriaApplication[]

  @@map("convocatorias")
}

model ConvocatoriaApplication {
  id             String            @id @default(cuid())
  fullName       String
  email          String
  phone          String
  experience     String
  driveLink      String?
  status         ApplicationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  convocatoriaId String
  convocatoria   Convocatoria      @relation(fields: [convocatoriaId], references: [id], onDelete: Cascade)

  @@map("convocatorias_applications")
}

model VolunteerApplication {
  id                String            @id @default(cuid())
  fullName          String
  email             String
  phone             String
  age               String
  occupation        String
  areaOfInterest    String
  availability      String
  motivation        String
  experience        String?
  driveLink         String?
  documents         String?
  status            ApplicationStatus @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("volunteer_applications")
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  CONSULTANT
}

enum ProgrammaticSector {
  HEALTH
  EDUCATION
  LIVELIHOODS
  PROTECTION
  SUSTAINABILITY
  EARLY_CHILD_DEVELOPMENT
  CHILDREN_IN_CRISIS
}

enum TransparencyCategory {
  DOCUMENT_CENTER
  ACCOUNTABILITY
  FINANCIERS_AND_ALLIES
  ANNUAL_REPORTS
}

enum ResourceCategory {
  MULTIMEDIA_CENTER
  PUBLICATIONS
}

enum ResourceSubcategory {
  VIDEOS
  AUDIOS
  DIGITAL_LIBRARY
  DOWNLOADABLE_GUIDES
  MANUALS
}

enum DonationType {
  GENERAL
  EMERGENCY
  SPECIFIC_PROJECT
  MONTHLY
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ComplaintStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  CLOSED
}

enum ConvocatoriaStatus {
  DRAFT
  ACTIVE
  UPCOMING
  CLOSED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
}
